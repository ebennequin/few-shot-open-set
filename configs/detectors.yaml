# === Detectors that work on features ===
# =======================================

feature_detectors:
  # === Open-Set Few-Shot ===
  SnatcherF:
    default: {1: {'temperature': 64.},
              }
    tuning:
      hparams2tune: ['temperature']
      hparam_values: {1: [[64.]], 5: [[64.]]}

  # === Open-Set ===
  OpenMax:
    default: {1: {'alpha': 3},
              }
    tuning:
      hparams2tune: ['alpha']
      hparam_values: {1: [[1, 2, 3, 4, 5]]}

  RPL:
    default: {1: {'inference_lr': 0.001, 'inference_steps': 100, 'num_rp_per_cls': 1, 'gamma': 5, 'lamb': 0.1}
              }

    tuning:
      hparams2tune: ['inference_lr', 'inference_steps', 'num_rp_per_cls', 'gamma', 'lamb']
      hparam_values: {1: [[0.001, 0.0001], [50, 100, 150], [1, 3], [1, 5, 10], [0.1, 0.5, 1.0]]}

  PROSER:
    default: {1: {'inference_lr': 0.001, 'inference_steps': 50, 'beta': 0.1, 'n_dummies': 1},
              }
    tuning:
      hparams2tune: ['inference_lr', 'inference_steps', 'beta', 'n_dummies']
      hparam_values: {1: [[0.001, 0.0001], [10, 50, 100, 200], [0.1, 0.5, 1.0], [1, 3]]}

  # === Robust SSL ===
  FixMatch:
    default: {1: {'n_iter': 300, 'lr': 1.0, 'confidence_threshold': 0.9,
                  'lambda_cc': 10.0, 'lambda_em': 0., 'temperature': 10,
                  'cons_loss': 'vat', 'depth_to_finetune': 1},
                }
    tuning:
      hparams2tune: ['depth_to_finetune', 'lambda_cc', 'lambda_em']
      hparam_values: {1: [[0, 1], [0., 0.1, 0.5, 1.0], [0., 0.1, 0.5, 1.0]],
                      }
    tuning:
      hparams2tune: ['normalize', 'lambda_', 'confidence_threshold']
      hparam_values: {1: [[True, False], [0.1, 0.5, 1.0], [0.6, 0.7, 0.8]],
                      }
  # === PyOD detectors ===
  
  HBOS:
    default: {1: {'n_bins': 5, },
              5: {'n_bins': 10}
              }
    tuning:
      hparams2tune: ['n_bins']
      hparam_values: {1: [[5, 10, 15]],
                      5: [[5, 10, 15]]
                      }

  IForest:
    default: {1: {'n_estimators': 100, 'max_features': 0.5},
              5: {'n_estimators': 100, 'max_features': 0.75}}
    tuning:
      hparams2tune: ['n_estimators', 'max_features']
      hparam_values: {1: [[10, 50, 100], [0.25, 0.5 , 0.75, 1.0]],
                      }

  OCSVM:
    default: {1: {'kernel': 'linear', 'shrinking': True},
              5: {'kernel': 'poly', 'shrinking': True}
              }
    tuning:
      hparams2tune: ['kernel', 'shrinking']
      hparam_values: {1: [['linear', 'poly', 'rbf', 'sigmoid'], [True, False]],
                    }

  PCA:
    default: {1: {'n_components': 2, 'whiten': True},
              5: {'n_components': 1, 'whiten': True}
              }
    tuning:
      hparams2tune: ['n_components', 'whiten']
      hparam_values: {1: [[1, 2, 4, 16, 256], [True, False]]
                      }

  KNN:
    default: {1: {'n_neighbors': 1, 'method': 'mean', 'distance': 'l2'},
              5: {'n_neighbors': 3, 'method': 'mean', 'distance': 'l2'}}
    tuning:
      hparams2tune: ['n_neighbors', 'method']
      hparam_values: {1: [[1, 3, 5, 10], ['mean', 'largest']]}

  MO_GAAL:
    default: {1: {'k': 10, 'stop_epochs': 20, 'lr_d': 0.01, 'lr_g': 0.0001},
              }
    tuning:
      hparams2tune: ['k', 'stop_epochs', 'lr_d', 'lr_g']
      hparam_values: {1: [[5, 10, 15], [10, 20, 30], [0.01, 0.001], [0.001, 0.0001]]}

  COPOD:
    default: {1: {'n_jobs': 1}}

  # === Ours ===
  
  OSTIM:
    default: {
        1: {
          'softmax_temperature': 10.0,
          'inference_steps': 200,
          'inference_lr': 0.001,
          'lambda_ce': 1.0,
          'lambda_marg': 1.0,
          'lambda_em': 0.1,
          "use_explicit_prototype": False,
          'params2adapt': 'prototypes',
          'mu_init': 'mean',
           },
        5: {
          'softmax_temperature': 10.0,
          'inference_steps': 50,
          'inference_lr': 0.001,
          'lambda_ce': 1.0,
          'lambda_marg': 1.0,
          'lambda_em': 0.1,
          "use_explicit_prototype": False,
          'params2adapt': 'prototypes',
          'mu_init': 'mean',
           },
             }
    # == For Grid Search
    tuning:
      hparams2tune: ['inference_steps', 'inference_lr', 'lambda_em']
      hparam_values: {1: [[50, 100, 200, 300], [0.001, 0.0001], [0.1, 0.5, 1.0]]}
      
    # == For ablation
    ablation:
      hparams2tune: ['use_explicit_prototype', 'inference_steps', 'mu_init']
      hparam_values: {1: [[True, False], [0, 100, 200], ['zeros', 'base', 'mean']]}

  OSEM:
    default: {
        1: {
          'inference_steps': 2,
          'lambda_s': 0.05,
          'lambda_z': 0.1,
          'ema_weight': 1.0,
          'use_inlier_latent': True,
           },
        5: {
          'inference_steps': 2,
          'lambda_s': 0.05,
          'lambda_z': 0.1,
          'ema_weight': 1.0,
          'use_inlier_latent': True,
           },
             }
    # == For Grid Search
    tuning:
      hparams2tune: ['inference_steps', 'lambda_s', 'lambda_z']
      hparam_values: {1: [[2, 3, 5], [0.01, 0.05, 0.1, 0.5], [0.01, 0.05, 0.1, 0.5]]}

    # == For ablation
    ablation:
      hparams2tune: ['use_inlier_latent', 'inference_steps']
      hparam_values: {1: [[True, False], [0, 2]]}

# === Detectors that work on probas ===
# =======================================

proba_detectors:
  kNNDetector:
    default: {1: {'n_neighbors': 3, 'method': 'mean', 'distance': 'kl'},
              5: {'n_neighbors': 3, 'method': 'mean', 'distance': 'kl'}}
    tuning:
      hparams2tune: ['n_neighbors', 'method']
      hparam_values: {1: [[1, 2, 3, 4], ['mean']],
                      5: [[1, 3, 5, 7, 10], ['mean']]}

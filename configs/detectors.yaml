# === Detectors that work on features ===
# =======================================

feature_detectors:
  # === Open-Set Few-Shot ===
  SnatcherF:
    default: {1: {'temperature': 64.},
              }
    tuning:
      hparams2tune: ['temperature']
      hparam_values: {1: [[64.]], 5: [[64.]]}

  # === Robust SSL ===
  FixMatch:
    default: {1: {'n_iter': 300, 'lr': 1.0, 'confidence_threshold': 0.9,
                  'lambda_cc': 10.0, 'lambda_em': 0., 'temperature': 10,
                  'cons_loss': 'vat', 'depth_to_finetune': 1},
                }
    tuning:
      hparams2tune: ['depth_to_finetune', 'lambda_cc', 'lambda_em']
      hparam_values: {1: [[0, 1], [0., 0.1, 0.5, 1.0], [0., 0.1, 0.5, 1.0]],
                      }
    tuning:
      hparams2tune: ['normalize', 'lambda_', 'confidence_threshold']
      hparam_values: {1: [[True, False], [0.1, 0.5, 1.0], [0.6, 0.7, 0.8]],
                      }
  # === PyOD detectors ===
  
  HBOS:
    default: {1: {'n_bins': 5, },
              5: {'n_bins': 10}
              }
    tuning:
      hparams2tune: ['n_bins']
      hparam_values: {1: [[5, 10, 15]],
                      5: [[5, 10, 15]]
                      }

  IForest:
    default: {1: {'n_estimators': 100, 'max_features': 0.5},
              5: {'n_estimators': 100, 'max_features': 0.75}}
    tuning:
      hparams2tune: ['n_estimators', 'max_features']
      hparam_values: {1: [[10, 50, 100], [0.25, 0.5 , 0.75, 1.0]],
                      }

  OCSVM:
    default: {1: {'kernel': 'linear', 'shrinking': True},
              5: {'kernel': 'poly', 'shrinking': True}
              }
    tuning:
      hparams2tune: ['kernel', 'shrinking']
      hparam_values: {1: [['linear', 'poly', 'rbf', 'sigmoid'], [True, False]],
                      }

  PCA:
    default: {1: {'n_components': 2, 'whiten': True},
              5: {'n_components': 1, 'whiten': True}
              }
    tuning:
      hparams2tune: ['n_components', 'whiten']
      hparam_values: {1: [[1, 2, 4, 16, 256], [True, False]]
                      }

  KNN:
    default: {1: {'n_neighbors': 1, 'method': 'mean', 'distance': 'l2'},
              5: {'n_neighbors': 3, 'method': 'mean', 'distance': 'l2'}}
    tuning:
      hparams2tune: ['n_neighbors', 'method']
      hparam_values: {1: [[1, 3, 5, 10], ['mean', 'largest']]}



                  


  # === Attempts at transductive detectors ===
  OOD_TIM:
    default: {
        1: {
          'softmax_temperature': 10.0,
          'inference_steps': 100,
          'inference_lr': 0.001,
          'lambda_ce': 1.0,
          'lambda_marg': 1.0,
          'lambda_em': 0.75,
          "use_extra_class": True,
          'params2adapt': 'prototypes-mu',
          'init': 'base',
           },
        5: {
          'softmax_temperature': 10.0,
          'inference_steps': 100,
          'inference_lr': 0.001,
          'lambda_ce': 1.0,
          'lambda_marg': 1.0,
          'lambda_em': 0.75,
          "use_extra_class": True,
          'params2adapt': 'prototypes-mu',
          'init': 'base',
           },
             }
    tuning:
      hparams2tune: ['params2adapt', 'inference_steps', 'inference_lr']
      hparam_values: {1: [['prototypes', 'mu', 'mu-prototypes'], [200, 300], [0.0001, 0.001]]}
    tuning:
      hparams2tune: ['n_neighbors', 'method']
      hparam_values: {1: [[1, 2, 3, 4], ['mean']],
                      5: [[1, 3, 5, 7, 10, 13], ['mean']]}
  AlternateDetector:
    default: {1: {'lambda_': 1., 'lr': 1., 'n_iter': 00, 'init': 'base', 'n_neighbors': 1},
                     5: {'lambda_': 1., 'lr': 1., 'n_iter': 10, 'init': 'base', 'n_neighbors': 3}}
    tuning:
      hparams2tune: ['n_neighbors']
      hparam_values: {1: [[1, 2, 3, 4]],
                      5: [[3, 5, 7, 10, 13]]}

  RepriDetector:
    default: {1: {'lambda_': 1., 'lr': 50., 'n_iter': 10, 'init': 'base', 'n_neighbors': 1, 'weight': 3., 'optimizer_name': 'SGD'},
              5: {'lambda_': 1., 'lr': 50., 'n_iter': 10, 'init': 'base', 'n_neighbors': 3, 'weight': 3., 'optimizer_name': 'SGD'}}
    tuning:
      hparams2tune: ['n_neighbors', 'lambda_', 'n_iter', 'lr', 'weight']
      hparam_values: {1: [[1, 3], [1, 5, 10], [20, 50], [1.0, 3.0, 5.0], [1.0, 3.0, 5.0]],
                      5: [[1, 3], [1, 5, 10], [20, 50], [1.0, 3.0, 5.0], [1.0, 3.0, 5.0]]}

  FinetuneDetector:
    default: {1: {'lambda_': 1., 'lr': 1., 'n_iter': 100, 'init': 'base', 'n_neighbors': 1, 'optimizer_name': 'SGD'},
                     5: {'lambda_': 1, 'lr': 1., 'n_iter': 100, 'init': 'base', 'n_neighbors': 3, 'optimizer_name': 'SGD'}}
    tuning:
      hparams2tune: ['n_neighbors', 'lambda_', 'n_iter', 'lr', 'weight']
      hparam_values: {1: [[1, 3], [1, 5, 10], [20, 50], [1.0, 3.0, 5.0], [1.0, 3.0, 5.0]],
                      5: [[1, 3], [1, 5, 10], [20, 50], [1.0, 3.0, 5.0], [1.0, 3.0, 5.0]]}


# === Detectors that work on probas ===
# =======================================

proba_detectors:
  kNNDetector:
    default: {1: {'n_neighbors': 3, 'method': 'mean', 'distance': 'kl'},
              5: {'n_neighbors': 3, 'method': 'mean', 'distance': 'kl'}}
    tuning:
      hparams2tune: ['n_neighbors', 'method']
      hparam_values: {1: [[1, 2, 3, 4], ['mean']],
                      5: [[1, 3, 5, 7, 10], ['mean']]}
